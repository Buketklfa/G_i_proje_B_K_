# -*- coding: utf-8 -*-
"""G_i_proje_bk_

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/g-i-proje-bk-9fc60491-1436-488d-8f8c-3a5b53081d12.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241222/auto/storage/goog4_request%26X-Goog-Date%3D20241222T204632Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D788b07031ee84da26b15cab2b15114bdc1190b34bb2b12fdc01f50de128bd93b61ecd96b10a11d3ef69e0980dcecf18c5c5d9837fd0ec4f79399d0c558f635e73f604ce24a653f445b6b9b7cab6dea26220f296f23fe443f73ddb46169f1eda617808d8fff022d1f54ddabc3b110f39e0e43fd209187328d2f48785d96b312c3e493342379f7682c18f6139a98df15636b4681515444d2bc49d726bc516744d04c4141bac3b98cc118829f36ea8837e6e22e39bf1ce847812c31a78ee98fc549060845a90562f19f55c78d59e308da11b0adab52f2df5330e46a27a3cf9341b87e76e94bf80ad6838af65b4bb2973785165e6226b70523f43dfe80a161d620c9
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
rrebirrth_animals_with_attributes_2_path = kagglehub.dataset_download('rrebirrth/animals-with-attributes-2')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import os  # Dosya ve klasör yönetimi işlemleri için.
import numpy as np  # Sayısal hesaplamalar ve veri manipülasyonu için.
import shutil  # Dosya ve klasör yönetimi işlemleri için.
import random  # Rastgele işlemler için.
from glob import glob  # Dosya yollarını bulmak için.
import cv2  # Görüntü işleme ve boyutlandırma için.
import matplotlib.pyplot as plt  # Sonuçları görselleştirmek için.
from sklearn.model_selection import train_test_split  # Eğitim ve test veri setlerini ayırmak için.
from sklearn.preprocessing import LabelEncoder  # Etiketleri sayısal değerlere dönüştürmek için.
from tensorflow.keras.preprocessing.image import ImageDataGenerator  # Görüntü veri artırma (augmentation) için.
from tensorflow.keras.models import Sequential  # Model oluşturmak için.
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization  # Model katmanlarını oluşturmak için.
from tensorflow.keras.utils import to_categorical  # Etiketleri kategorik verilere dönüştürmek için.
from tensorflow import keras  # Derin öğrenme modelleme ve işlevsellik için.
from tensorflow.keras import models, layers  # Keras ile model ve katmanlar oluşturmak için.
import seaborn as sns  # İstatistiksel veri görselleştirmeleri için.
import plotly.express as px  # Etkileşimli ve dinamik grafikler oluşturmak için.
import missingno as msno  # Eksik veri analizi ve giderilmesi için.
import warnings  # Uyarıları kontrol etmek için.
warnings.filterwarnings("ignore")  # Tüm uyarıları gizlemek için.
from matplotlib import style  # Grafik stillerini değiştirmek için.
style.use("ggplot")  # ggplot stilini uygular.

# Kaggle'daki veri seti yolunu kullanarak dosyaları okuyalım
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

import os  # Dosya ve klasör yönetimi işlemleri için.
import numpy as np  # Sayısal hesaplamalar ve veri manipülasyonu için.
import shutil  # Dosya ve klasör yönetimi işlemleri için.
import random  # Rastgele işlemler için.
from glob import glob  # Dosya yollarını bulmak için.
import cv2  # Görüntü işleme ve boyutlandırma için.
import matplotlib.pyplot as plt  # Sonuçları görselleştirmek için.
from sklearn.model_selection import train_test_split  # Eğitim ve test veri setlerini ayırmak için.
from sklearn.preprocessing import LabelEncoder  # Etiketleri sayısal değerlere dönüştürmek için.
from tensorflow.keras.preprocessing.image import ImageDataGenerator  # Görüntü veri artırma (augmentation) için.
from tensorflow.keras.models import Sequential  # Model oluşturmak için.
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, BatchNormalization  # Model katmanlarını oluşturmak için.
from tensorflow.keras.utils import to_categorical  # Etiketleri kategorik verilere dönüştürmek için.
from tensorflow import keras  # Derin öğrenme modelleme ve işlevsellik için.
from tensorflow.keras import models, layers  # Keras ile model ve katmanlar oluşturmak için.
import seaborn as sns  # İstatistiksel veri görselleştirmeleri için.
import plotly.express as px  # Etkileşimli ve dinamik grafikler oluşturmak için.
import missingno as msno  # Eksik veri analizi ve giderilmesi için.
import warnings  # Uyarıları kontrol etmek için.
warnings.filterwarnings("ignore")  # Tüm uyarıları gizlemek için.
from matplotlib import style  # Grafik stillerini değiştirmek için.
style.use("ggplot")  # ggplot stilini uygular.
from PIL import Image  # Görüntü işleme için.
from skimage import io, color, filters  # Scikit-Image modülleri.
import SimpleITK as sitk  # Tıbbi görüntü işleme için.

import os
import cv2
import matplotlib.pyplot as plt

# Örnek olarak bir resim dosyasını okuyalım ve gösterelim
image_folder = '/kaggle/input/animals-with-attributes-2/Animals_with_Attributes2/JPEGImages'
image_path = os.path.join(image_folder, 'antelope', 'antelope_10001.jpg')  # Belirli bir resim dosyasını seçelim
image = cv2.imread(image_path)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.axis('off')  # Eksenleri kapatalım
plt.show()

# Veri seti klasörünün yolunu belirtelim
dataset_path = '/kaggle/input/animals-with-attributes-2/Animals_with_Attributes2/JPEGImages'

# Sınıfları belirlemek için klasör adlarını listeleyelim
classes = os.listdir(dataset_path)
print("Sınıflar:", classes)

# Her sınıftan bir örnek görüntü gösterelim
fig, axes = plt.subplots(len(classes) // 5 + 1, 5, figsize=(15, len(classes) * 1.5))
axes = axes.flatten()

for i, class_name in enumerate(classes):
    image_folder = os.path.join(dataset_path, class_name)
    image_files = os.listdir(image_folder)
    if image_files:
        image_path = os.path.join(image_folder, image_files[0])  # İlk görüntüyü alalım
        image = cv2.imread(image_path)
        axes[i].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        axes[i].set_title(class_name)
        axes[i].axis('off')

plt.tight_layout()
plt.show()

# Veri seti klasörünün yolunu belirtelim
dataset_path = '/kaggle/input/animals-with-attributes-2/Animals_with_Attributes2/JPEGImages'
selected_classes = ['collie', 'dolphin', 'elephant', 'fox', 'moose', 'rabbit', 'sheep', 'squirrel', 'giant panda', 'polar bear']
output_path = '/kaggle/working/selected_images'

# Seçilen sınıfları ve her sınıftan 650 resmi yeni bir klasöre kopyalayalım
if not os.path.exists(output_path):
    os.makedirs(output_path)

for class_name in selected_classes:
    class_folder = os.path.join(dataset_path, class_name.replace(' ', '+'))
    output_class_folder = os.path.join(output_path, class_name.replace(' ', '+'))
    if not os.path.exists(output_class_folder):
        os.makedirs(output_class_folder)

    images = os.listdir(class_folder)[:650]  # İlk 650 resmi seçelim
    for image_name in images:
        image_path = os.path.join(class_folder, image_name)
        shutil.copy(image_path, output_class_folder)

# Resimleri aynı boyuta getirme ve normalize etme
image_size = (128, 128)  # İstediğiniz boyutu belirleyin
normalized_images = []

for class_name in selected_classes:
    class_folder = os.path.join(output_path, class_name.replace(' ', '+'))
    for image_name in os.listdir(class_folder):
        image_path = os.path.join(class_folder, image_name)
        image = cv2.imread(image_path)
        img_resized = cv2.resize(image, image_size)
        img_normalized = img_resized / 255.0
        normalized_images.append((img_normalized, class_name))

# Normalized_images listesi, normalize edilmiş resimleri ve sınıf adlarını içerir

import matplotlib.pyplot as plt

# Her sınıftan bir örnek görüntü gösterelim
fig, axes = plt.subplots(2, 5, figsize=(15, 6))
axes = axes.flatten()

for i, (img, class_name) in enumerate(normalized_images[:10]):  # İlk 10 sınıfı alalım
    axes[i].imshow(img)
    axes[i].set_title(class_name)
    axes[i].axis('off')

plt.tight_layout()
plt.show()

# Veri seti klasörünün yolunu belirtelim
dataset_path = '/kaggle/input/animals-with-attributes-2/Animals_with_Attributes2/JPEGImages'
selected_classes = ['collie', 'dolphin', 'elephant', 'fox', 'moose', 'rabbit', 'sheep', 'squirrel', 'giant panda', 'polar bear']
output_path = '/kaggle/working/selected_images'

# Seçilen sınıfları ve her sınıftan 650 resmi yeni bir klasöre kopyalayalım
if not os.path.exists(output_path):
    os.makedirs(output_path)

for class_name in selected_classes:
    class_folder = os.path.join(dataset_path, class_name.replace(' ', '+'))
    output_class_folder = os.path.join(output_path, class_name.replace(' ', '+'))
    if not os.path.exists(output_class_folder):
        os.makedirs(output_class_folder)

    images = os.listdir(class_folder)[:650]  # İlk 650 resmi seçelim
    for image_name in images:
        image_path = os.path.join(class_folder, image_name)
        shutil.copy(image_path, output_class_folder)

# Resimleri aynı boyuta getirme ve normalize etme
image_size = (128, 128)  # İstediğiniz boyutu belirleyin
X = []
y = []

for class_name in selected_classes:
    class_folder = os.path.join(output_path, class_name.replace(' ', '+'))
    for image_name in os.listdir(class_folder):
        image_path = os.path.join(class_folder, image_name)
        image = cv2.imread(image_path)
        img_resized = cv2.resize(image, image_size)
        img_normalized = img_resized / 255.0
        X.append(img_normalized)
        y.append(class_name)

X = np.array(X)
y = np.array(y)

# Veriyi eğitim ve test setlerine ayıralım
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

print("Eğitim seti boyutu:", X_train.shape)
print("Test seti boyutu:", X_test.shape)

# Eğitim setinden örnek görüntüler gösterelim
fig, axes = plt.subplots(2, 5, figsize=(15, 6))
axes = axes.flatten()

for i in range(10):  # İlk 10 görüntüyü alalım
    axes[i].imshow(X_train[i])
    axes[i].set_title(y_train[i])
    axes[i].axis('off')

plt.tight_layout()
plt.show()

# Test setinden örnek görüntüler gösterelim
fig, axes = plt.subplots(2, 5, figsize=(15, 6))
axes = axes.flatten()

for i in range(10):  # İlk 10 görüntüyü alalım
    axes[i].imshow(X_test[i])
    axes[i].set_title(y_test[i])
    axes[i].axis('off')

plt.tight_layout()
plt.show()